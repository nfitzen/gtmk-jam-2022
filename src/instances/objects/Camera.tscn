[gd_scene load_steps=3 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec3 dark = vec3(0f, 0f, 0f);
uniform vec3 med = vec3(0f, 1f, 0.5f);
uniform vec3 light = vec3(1f, 1f, 1f);

vec4 rgb_from_hsl(float h, float s, float l) {
    float chroma = (1f - abs(2f * l - 1f)) * s;
    float hp = h * 6f;
    float x = chroma * (1f - abs(mod(hp, 2f) - 1f));
    vec4 rgb = vec4(0f,0f,0f,1.0f);
    if(0f < hp && hp <= 1f) {
        rgb += vec4(chroma, x, 0f, 0f);
    } else if(1f < hp && hp <= 2f) {
        rgb += vec4(x, chroma, 0f, 0f);
    } else if(2f < hp && hp <= 3f) {
        rgb += vec4(0f, chroma, x, 0f);
    } else if(3f < hp && hp <= 4f) {
        rgb += vec4(0f, x, chroma, 0f);
    } else if(4f < hp && hp <= 5f) {
        rgb += vec4(x, 0f, chroma, 0f);
    } else {
        rgb += vec4(chroma, 0f, x, 0f);
    }
    float m = l - chroma * 0.5;
    rgb += vec4(m,m,m,0f);
    return rgb;
}

void fragment() {
    vec4 bg = texture(SCREEN_TEXTURE, SCREEN_UV);
    float avg = (bg.r + bg.g + bg.b) / 3.0f;
    if(avg < 0.5f) {
        avg = avg * 2f;
        COLOR = rgb_from_hsl(dark.x + avg * (med.x - dark.x), dark.y + avg * (med.y - dark.y), dark.z + avg * (med.z - dark.z));
    } else {
        avg = avg - 0.5f;
        avg = avg * 2f;
        COLOR = rgb_from_hsl(med.x + avg * 2f * (light.x - med.x), med.y + avg * (light.y - med.y), med.z + avg * (light.z - med.z));
    }
    
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/dark = Vector3( 0.757, 1, 0.06 )
shader_param/med = Vector3( 0.499, 0.6, 0.467 )
shader_param/light = Vector3( 0.765, 0, 0.894 )

[node name="Camera" type="Camera2D"]
current = true
zoom = Vector2( 0.5, 0.5 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="ColorRect" type="ColorRect" parent="CanvasLayer"]
material = SubResource( 2 )
anchor_right = 0.387
anchor_bottom = 0.544
margin_left = -128.0
margin_top = -130.0
margin_right = 1348.71
margin_bottom = -213.4
rect_scale = Vector2( 0.696563, 3.42904 )
__meta__ = {
"_edit_use_anchors_": false
}
